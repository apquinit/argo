package env

import (
	"log"
	"os"
	"strconv"

	"github.com/go-playground/validator/v10"
	"github.com/joho/godotenv"
)

// Env holds the environment variables
type Env struct {
	Port int    `validate:"required,min=1,max=65535"`
	Mode string `validate:"required,oneof=debug release"`
}

// LoadEnv loads and validates environment variables
func LoadEnv() (*Env, error) {
	// Optionally load from a .env file
	err := godotenv.Load()
	if err != nil {
		log.Println("Warning: .env file not found. Using system environment variables.")
	}

	// Parse and validate environment variables
	env := &Env{
		Mode: os.Getenv("MODE"),
	}

	port, err := strconv.Atoi(os.Getenv("PORT"))
	if err != nil {
		log.Fatalf("Error: PORT environment variable must be a valid integer.")
	}
	env.Port = port

	validate := validator.New()
	err = validate.Struct(env)
	if err != nil {
		for _, err := range err.(validator.ValidationErrors) {
			log.Fatalf("Error: %s environment variable is invalid: %v", err.Field(), err)
		}
	}

	return env, nil
}
